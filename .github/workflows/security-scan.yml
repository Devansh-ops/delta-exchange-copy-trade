name: Security & Vulnerability Scans

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - ".github/**"
      - "README.md"
  pull_request: {}
  workflow_dispatch: {}
  schedule:
    # Weekly run (Mon 02:00 UTC ~ 07:30 IST)
    - cron: "0 2 * * 1"

permissions:
  contents: read
  security-events: write

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect:
    name: "Detect repo features"
    runs-on: ubuntu-latest
    outputs:
      has_requirements: ${{ steps.flags.outputs.has_requirements }}
      has_node_locks: ${{ steps.flags.outputs.has_node_locks }}
      has_dockerfile: ${{ steps.flags.outputs.has_dockerfile }}
    steps:
      - uses: actions/checkout@v4
      - id: flags
        run: |
          echo "Scanning tree for key filesâ€¦"
          has_requirements=$(find . -type f -name 'requirements.txt' | grep -q . && echo true || echo false)
          has_node_locks=$(find . -type f \( -name 'package-lock.json' -o -name 'yarn.lock' -o -name 'pnpm-lock.yaml' \) | grep -q . && echo true || echo false)
          has_dockerfile=$([ -f Dockerfile ] && echo true || echo false)

          echo "has_requirements=$has_requirements" >> "$GITHUB_OUTPUT"
          echo "has_node_locks=$has_node_locks"   >> "$GITHUB_OUTPUT"
          echo "has_dockerfile=$has_dockerfile"   >> "$GITHUB_OUTPUT"

  codeql:
    name: "CodeQL (SAST)"
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      matrix:
        language: [ "python" ]
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - uses: github/codeql-action/autobuild@v3
      - uses: github/codeql-action/analyze@v3

  secrets:
    name: "Secret scanning (gitleaks)"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "detect --source . --no-git --report-format sarif --report-path gitleaks.sarif"
      - name: Upload SARIF (Gitleaks)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
          category: gitleaks

  deps-python:
    name: "Python dependency audit"
    needs: detect
    if: ${{ needs.detect.outputs.has_requirements == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install pip-audit
        run: python -m pip install --upgrade pip pip-audit
      - name: Run pip-audit (SARIF)
        run: |
          pip-audit -r requirements.txt -f sarif -o pip-audit.sarif || true
      - name: Upload SARIF (pip-audit)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pip-audit.sarif
          category: pip-audit

  deps-node:
    name: "Node dependency audit"
    needs: detect
    if: ${{ needs.detect.outputs.has_node_locks == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Install (no scripts)
        run: |
          if [ -f package-lock.json ]; then npm ci --ignore-scripts; fi
          if [ -f yarn.lock ]; then corepack enable && yarn install --ignore-scripts --frozen-lockfile; fi
          if [ -f pnpm-lock.yaml ]; then corepack enable && pnpm install --ignore-scripts --frozen-lockfile; fi
      - name: npm audit (fail on high+)
        if: ${{ hashFiles('**/package-lock.json') != '' }} # safe at step level; remove if still picky
        run: npm audit --omit=dev --audit-level=high || exit 1

  trivy-fs:
    name: "Trivy (fs: vuln/secret/misconfig)"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    env:
      TRIVY_NO_PROGRESS: "true"
    steps:
      - uses: actions/checkout@v4
      - name: Trivy filesystem scan -> SARIF
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          scanners: "vuln,secret,misconfig"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"
          format: sarif
          output: trivy-fs.sarif
      - name: Upload SARIF (Trivy fs)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
          category: trivy-fs

  trivy-image:
    name: "Trivy (image) if Dockerfile present"
    needs: detect
    if: ${{ needs.detect.outputs.has_dockerfile == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Build image for scan
        run: docker build -t app:scan .
      - name: Trivy image scan -> SARIF
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: app:scan
          format: sarif
          output: trivy-image.sarif
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"
      - name: Upload SARIF (Trivy image)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
          category: trivy-image

  dependency-review:
    name: "Dependency review (PRs)"
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
